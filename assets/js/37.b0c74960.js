(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{297:function(t,v,_){"use strict";_.r(v);var e=_(28),l=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"类型转换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),_("h2",{attrs:{id:"数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),_("p",[t._v("原始类型")]),t._v(" "),_("ul",[_("li",[t._v("Boolean")]),t._v(" "),_("li",[t._v("Null")]),t._v(" "),_("li",[t._v("Undefined")]),t._v(" "),_("li",[t._v("Number")]),t._v(" "),_("li",[t._v("String")]),t._v(" "),_("li",[t._v("Symbol")])]),t._v(" "),_("p",[t._v("对象")]),t._v(" "),_("ul",[_("li",[t._v("​\tObject")])]),t._v(" "),_("h2",{attrs:{id:"显式类型转换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#显式类型转换"}},[t._v("#")]),t._v(" 显式类型转换")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Number函数")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("数值")]),t._v("：\n转换后还是原来的值。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("字符串")]),t._v("：\n如果可以被解析成数值，则转换为相应的数值，否则得到NaN。空字符串转为0。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("布尔值")]),t._v("：\ntrue转成1，false转成0。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("undefined")]),t._v("：\n转成NaN。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("null")]),t._v("：\n转成0。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("对象类型")]),t._v("：")]),t._v(" "),_("p",[t._v("先调用对象自身的valueOf方法，如果该类型返回原始类型的值，则直接对该值使用Number方法，不再进行后续步骤。")]),t._v(" "),_("p",[t._v("如果valueOf方法返回复合类型的值，再调用对象自身的toString方法，如果toString方法返回原始类型的值，则对该值使用Number方法，不再进行后续步骤。")]),t._v(" "),_("p",[t._v("如果toString方法返回的是复合类型的值，则报错。")])])])]),t._v(" "),_("li",[_("p",[t._v("String函数")]),t._v(" "),_("ul",[_("li",[t._v("数值：转为相应的字符串")]),t._v(" "),_("li",[t._v("字符串：转换后还是原来的值")]),t._v(" "),_("li",[t._v("布尔值：true转为“true”，false转为“false”")]),t._v(" "),_("li",[t._v("undefined：转为“undefined”")]),t._v(" "),_("li",[t._v("null：转为“null”")]),t._v(" "),_("li",[t._v("对象：toString->valueOf->还是复合类型就报错")])])]),t._v(" "),_("li",[_("p",[t._v("Boolean函数")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("undefined")])]),t._v(" "),_("li",[_("p",[t._v("null")])]),t._v(" "),_("li",[_("p",[t._v("-0")])]),t._v(" "),_("li",[_("p",[t._v("+0")])]),t._v(" "),_("li",[_("p",[t._v("NaN")])]),t._v(" "),_("li",[_("p",[t._v("''（空字符串）")]),t._v(" "),_("p",[t._v("以上结果都是返回false")])])])])]),t._v(" "),_("h2",{attrs:{id:"隐式类型转换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[t._v("#")]),t._v(" 隐式类型转换")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('[] + []  ""，调用的是Number函数->toString\n[] + {}  "[object Object]"\n{} + []    0,Number([])答案为0\n{} + {}    chrome（"[object object] [object object]"）和firefox（NaN）中结果不一样\ntrue + true  2\n1 + {a:1}  "1[object Object]"\n')])])]),_("h2",{attrs:{id:"typeof的结果"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#typeof的结果"}},[t._v("#")]),t._v(" typeof的结果")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://image.lanbling.com/md/image-20200505121330609.png",alt:"image-20200505120704535"}})])])}),[],!1,null,null,null);v.default=l.exports}}]);